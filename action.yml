name: 'DPF CMake builder action'
description: 'Builds DPF based plugins that use CMake as build system'
author: 'DISTRHO'

inputs:
  target:
    description: 'Target OS'
    required: true
    default: 'linux'
  dpf_path:
    description: 'Relative path to DPF submodule'
    required: false
    default: 'dpf'

env:
  DEBIAN_FRONTEND: noninteractive
  HOMEBREW_NO_AUTO_UPDATE: 1

outputs:
  release_filename:
    description: "Filename of generated release artifact"
    value: ${{ env.RELEASE_FILENAME }}
  sha8:
    description: "SHA8 of job commit or pull request id"
    value: ${{ github.event.pull_request.number || env.SHA8 }}

runs:
  using: "composite"
  steps:
    # setup dependencies
    - name: Fix GitHub's mess (ubuntu-20.04)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
        sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
    # linux-arm64
    - name: Set up dependencies (linux-arm64)
      if: ${{ inputs.target == 'linux-arm64' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture arm64
        sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
        sudo apt-get update -qq
        sudo apt-get install -yqq g++-aarch64-linux-gnu libasound2-dev:arm64 libcairo2-dev:arm64 libdbus-1-dev:arm64 libgl1-mesa-dev:arm64 liblo-dev:arm64 libx11-dev:arm64 libxcursor-dev:arm64 libxext-dev:arm64 libxrandr-dev:arm64 qemu-user-static
    - name: Build linux arm64 cross-compiled
      if: ${{ inputs.target == 'linux-arm64' }}
      shell: bash
      env:
        CC: aarch64-linux-gnu-gcc
        CXX: aarch64-linux-gnu-g++
        LDFLAGS: -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=ON \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_AR=/usr/bin/aarch64-linux-gnu-ar \
            -DCMAKE_C_COMPILER_AR=/usr/bin/aarch64-linux-gnu-ar \
            -DCMAKE_CXX_COMPILER_AR=/usr/bin/aarch64-linux-gnu-ar \
            -DCMAKE_RANLIB=/usr/bin/aarch64-linux-gnu-ranlib \
            -DCMAKE_C_COMPILER_RANLIB=/usr/bin/aarch64-linux-gnu-ranlib \
            -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/aarch64-linux-gnu-ranlib \
            -DDPF_VST3_ARCHITECTURE=aarch64 .
        make -j $(nproc)
    # linux-armhf
    - name: Set up dependencies (linux-armhf)
      if: ${{ inputs.target == 'linux-armhf' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture armhf
        sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
        echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-armhf.list
        echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
        echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
        sudo apt-get update -qq
        sudo apt-get install -yqq g++-arm-linux-gnueabihf libasound2-dev:armhf libcairo2-dev:armhf libdbus-1-dev:armhf libgl1-mesa-dev:armhf liblo-dev:armhf libx11-dev:armhf libxcursor-dev:armhf libxext-dev:armhf libxrandr-dev:armhf qemu-user-static
    - name: Build linux armhf cross-compiled
      if: ${{ inputs.target == 'linux-armhf' }}
      shell: bash
      env:
        CC: arm-linux-gnueabihf-gcc
        CXX: arm-linux-gnueabihf-g++
        LDFLAGS: -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=ON \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_AR=/usr/bin/arm-linux-gnueabihf-ar \
            -DCMAKE_C_COMPILER_AR=/usr/bin/arm-linux-gnueabihf-ar \
            -DCMAKE_CXX_COMPILER_AR=/usr/bin/arm-linux-gnueabihf-ar \
            -DCMAKE_RANLIB=/usr/bin/arm-linux-gnueabihf-ranlib \
            -DCMAKE_C_COMPILER_RANLIB=/usr/bin/arm-linux-gnueabihf-ranlib \
            -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/arm-linux-gnueabihf-ranlib \
            -DDPF_VST3_ARCHITECTURE=armv7a .
        make -j $(nproc)
    # linux-i686
    - name: Set up dependencies (linux-i686)
      if: ${{ inputs.target == 'linux-i386' || inputs.target == 'linux-i686' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        sudo apt-get install -yqq g++-i686-linux-gnu libasound2-dev:i386 libcairo2-dev:i386 libdbus-1-dev:i386 libgl1-mesa-dev:i386 liblo-dev:i386 libx11-dev:i386 libxcursor-dev:i386 libxext-dev:i386 libxrandr-dev:i386
    - name: Build linux i686
      if: ${{ inputs.target == 'linux-i386' || inputs.target == 'linux-i686' }}
      shell: bash
      env:
        CC: i686-linux-gnu-gcc
        CXX: i686-linux-gnu-g++
        CFLAGS: -m32
        CXXFLAGS: -m32
        LDFLAGS: -m32 -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/i386-linux-gnu/pkgconfig
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=ON \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_AR=/usr/bin/i686-linux-gnu-ar \
            -DCMAKE_C_COMPILER_AR=/usr/bin/i686-linux-gnu-ar \
            -DCMAKE_CXX_COMPILER_AR=/usr/bin/i686-linux-gnu-ar \
            -DCMAKE_RANLIB=/usr/bin/i686-linux-gnu-ranlib \
            -DCMAKE_C_COMPILER_RANLIB=/usr/bin/i686-linux-gnu-ranlib \
            -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/i686-linux-gnu-ranlib \
            -DDPF_VST3_ARCHITECTURE=i386 .
        make -j $(nproc)
    # linux-riscv64
    - name: Set up dependencies (linux-riscv64)
      if: ${{ inputs.target == 'linux-riscv64' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture riscv64
        sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
        echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-riscv64.list
        echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-riscv64.list
        echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-riscv64.list
        sudo apt-get update -qq
        sudo apt-get install -yqq g++-riscv64-linux-gnu libasound2-dev:riscv64 libcairo2-dev:riscv64 libdbus-1-dev:riscv64 libgl1-mesa-dev:riscv64 libglapi-mesa:riscv64 libglvnd0:riscv64 liblo-dev:riscv64 libx11-dev:riscv64 libxcursor-dev:riscv64 libxext-dev:riscv64 libxrandr-dev:riscv64 qemu-user-static
    - name: Build linux riscv64 cross-compiled
      if: ${{ inputs.target == 'linux-riscv64' }}
      shell: bash
      env:
        CC: riscv64-linux-gnu-gcc
        CXX: riscv64-linux-gnu-g++
        LDFLAGS: -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/riscv64-linux-gnu/pkgconfig
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=ON \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_AR=/usr/bin/riscv64-linux-gnu-ar \
            -DCMAKE_C_COMPILER_AR=/usr/bin/riscv64-linux-gnu-ar \
            -DCMAKE_CXX_COMPILER_AR=/usr/bin/riscv64-linux-gnu-ar \
            -DCMAKE_RANLIB=/usr/bin/riscv64-linux-gnu-ranlib \
            -DCMAKE_C_COMPILER_RANLIB=/usr/bin/riscv64-linux-gnu-ranlib \
            -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/riscv64-linux-gnu-ranlib \
            -DDPF_VST3_ARCHITECTURE=riscv64 .
        make -j $(nproc)
    # linux-x86_64
    - name: Set up dependencies (linux-x86_64)
      if: ${{ inputs.target == 'linux-x86_64' || inputs.target == 'linux' }}
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq libasound2-dev libcairo2-dev libdbus-1-dev libgl1-mesa-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
    - name: Build linux x86_64
      if: ${{ inputs.target == 'linux-x86_64' || inputs.target == 'linux' }}
      shell: bash
      env:
        LDFLAGS: -static-libgcc -static-libstdc++
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release .
        make -j $(nproc)
    # macos-intel
    - name: Build macOS intel
      if: ${{ inputs.target == 'macos-intel' }}
      shell: bash
      env:
        CFLAGS: -arch x86_64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_8 -mmacosx-version-min=10.8 -stdlib=libc++
        CXXFLAGS: -arch x86_64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_8 -mmacosx-version-min=10.8 -stdlib=libc++
        LDFLAGS: -arch x86_64 -mmacosx-version-min=10.8 -stdlib=libc++
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES='x86_64' -DCMAKE_OSX_DEPLOYMENT_TARGET='10.8' -DCMAKE_OSX_SYSROOT="macosx" .
        make -j $(sysctl -n hw.logicalcpu)
        ${{ inputs.dpf_path }}/utils/package-osx-bundles.sh
    # macos-universal
    - name: Build macOS universal
      if: ${{ inputs.target == 'macos-universal' || inputs.target == 'macos' }}
      shell: bash
      env:
        CFLAGS: -arch x86_64 -arch arm64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_12 -mmacosx-version-min=10.12 -mtune=generic -msse -msse2
        CXXFLAGS: -arch x86_64 -arch arm64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_12 -mmacosx-version-min=10.12 -mtune=generic -msse -msse2
        LDFLAGS: -arch x86_64 -arch arm64 -mmacosx-version-min=10.12
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES='arm64;x86_64' -DCMAKE_OSX_DEPLOYMENT_TARGET='10.12' -DCMAKE_OSX_SYSROOT="macosx" .
        make -j $(sysctl -n hw.logicalcpu)
        ${{ inputs.dpf_path }}/utils/package-osx-bundles.sh
    # win32
    - name: Set up dependencies (win32)
      if: ${{ inputs.target == 'win32' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        sudo apt-get install -yqq binutils-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64 wine-stable:i386
    - name: Build win32 cross-compiled
      if: ${{ inputs.target == 'win32' }}
      shell: bash
      env:
        CC: i686-w64-mingw32-gcc
        CXX: i686-w64-mingw32-g++
        EXE_WRAPPER: wine
        PKG_CONFIG: "false"
        WINEDEBUG: "-all"
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=ON \
            -DCMAKE_CROSSCOMPILING_EMULATOR=wine \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_AR=/usr/bin/i686-w64-mingw32-ar \
            -DCMAKE_C_COMPILER_AR=/usr/bin/i686-w64-mingw32-ar \
            -DCMAKE_CXX_COMPILER_AR=/usr/bin/i686-w64-mingw32-ar \
            -DCMAKE_RANLIB=/usr/bin/i686-w64-mingw32-ranlib \
            -DCMAKE_C_COMPILER_RANLIB=/usr/bin/i686-w64-mingw32-ranlib \
            -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/i686-w64-mingw32-ranlib \
            -DCMAKE_RC_COMPILER=/usr/bin/i686-w64-mingw32-windres \
            -DDPF_VST3_ARCHITECTURE=x86 .
        make -j $(nproc)
    # win64
    - name: Set up dependencies (win64)
      if: ${{ inputs.target == 'win64' }}
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 mingw-w64 wine-stable
    - name: Build win64 cross-compiled
      if: ${{ inputs.target == 'win64' }}
      shell: bash
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        EXE_WRAPPER: wine
        PKG_CONFIG: "false"
        WINEDEBUG: "-all"
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CROSSCOMPILING=ON \
            -DCMAKE_CROSSCOMPILING_EMULATOR=wine \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_AR=/usr/bin/x86_64-w64-mingw32-ar \
            -DCMAKE_C_COMPILER_AR=/usr/bin/x86_64-w64-mingw32-ar \
            -DCMAKE_CXX_COMPILER_AR=/usr/bin/x86_64-w64-mingw32-ar \
            -DCMAKE_RANLIB=/usr/bin/x86_64-w64-mingw32-ranlib \
            -DCMAKE_C_COMPILER_RANLIB=/usr/bin/x86_64-w64-mingw32-ranlib \
            -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/x86_64-w64-mingw32-ranlib \
            -DCMAKE_RC_COMPILER=/usr/bin/x86_64-w64-mingw32-windres \
            -DDPF_VST3_ARCHITECTURE=x86_64 .
        make -j $(nproc)
    # pluginval
    - name: Set up dependencies
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
        # custom repos
        wget https://launchpad.net/~kxstudio-debian/+archive/kxstudio/+files/kxstudio-repos_11.1.0_all.deb
        sudo dpkg -i kxstudio-repos_11.1.0_all.deb
        sudo apt-get update -qq
        # build-deps
        sudo apt-get install -yqq libasound2-dev libcairo2-dev libdbus-1-dev libgl1-mesa-dev liblo-dev libpulse-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
        # runtime testing
        sudo apt-get install -yqq carla-git lilv-utils lv2-dev lv2lint kxstudio-lv2-extensions mod-lv2-extensions valgrind xvfb
    - name: Build plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      env:
        CFLAGS: -g
        CXXFLAGS: -g -DDPF_ABORT_ON_ERROR -DDPF_RUNTIME_TESTING -Wno-pmf-conversions
        LDFLAGS: -static-libgcc -static-libstdc++
      run: |
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo .
        make -j $(nproc)
    - name: Validate LV2 ttl syntax
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
        lv2_validate \
            /usr/lib/lv2/mod.lv2/*.ttl \
            /usr/lib/lv2/kx-meta/*.ttl \
            /usr/lib/lv2/kx-control-input-port-change-request.lv2/*.ttl \
            /usr/lib/lv2/kx-programs.lv2/*.ttl \
            ./bin/*.lv2/*.ttl
    - name: Validate LV2 metadata and binaries
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
        export LV2_PATH=/tmp/lv2-path
        mkdir ${LV2_PATH}
        cp -r bin/*.lv2 \
            /usr/lib/lv2/{atom,buf-size,core,data-access,kx-control-input-port-change-request,kx-programs,instance-access,midi,parameters,port-groups,port-props,options,patch,presets,resize-port,state,time,ui,units,urid,worker}.lv2 \
            ${LV2_PATH}
        lv2lint -s lv2_generate_ttl -l ld-linux-x86-64.so.2 -M nopack $(lv2ls)
    - name: Test LADSPA plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(ls bin/ | grep ladspa.so); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native ladspa ./bin/${p} "" 1>/dev/null; \
          done
    - name: Test DSSI plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(ls bin/ | grep dssi.so); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native dssi ./bin/${p} "" 1>/dev/null; \
          done
    - name: Test LV2 plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          export LV2_PATH=/tmp/lv2-path
          for p in $(lv2ls); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native lv2 "" ${p} 1>/dev/null; \
          done
    - name: Test VST2 plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(find bin/ | grep -e vst.so -e '.*\.vst/.*\.so'); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native vst2 ./${p} "" 1>/dev/null; \
          done
    - name: Test VST3 plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(ls bin/ | grep vst3); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native vst3 ./bin/${p} "" 1>/dev/null; \
          done
    - name: Test CLAP plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(find bin/ -type f | grep '.*\.clap$'); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native clap ./${p} "" 1>/dev/null; \
          done
    # upload artifacts (properties)
    - name: Set sha8
      shell: bash
      run: |
        echo "SHA8=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
    - name: Set basenames
      shell: bash
      run: |
        echo "ARTIFACT_BASENAME=${{ github.event.repository.name }}-${{ inputs.target }}-${{ github.event.pull_request.number || env.SHA8 }}" >> $GITHUB_ENV
        echo "RELEASE_BASENAME=${{ github.event.repository.name }}-${{ github.ref_name }}" >> $GITHUB_ENV
    # create release archive (macOS exception)
    - name: Create release archive (macOS non-release)
      if: ${{ startsWith(inputs.target, 'macos') }}
      shell: bash
      run: |
        cp *-macOS.pkg ${{ env.ARTIFACT_BASENAME }}.pkg
    # upload artifacts (action)
    - name: Upload artifacts (Linux)
      if: ${{ startsWith(inputs.target, 'linux') }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_BASENAME }}
        path: |
          bin/*
    - name: Upload artifacts (macOS)
      if: ${{ startsWith(inputs.target, 'macos') }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_BASENAME }}
        path: |
          ${{ env.ARTIFACT_BASENAME }}.pkg
          bin/*
          !bin/*-ladspa.dylib
          !bin/*-dssi.dylib
          !bin/lv2
          !bin/vst2
          !bin/vst3
          !bin/clap
    - name: Upload artifacts (Windows)
      if: ${{ startsWith(inputs.target, 'win') }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_BASENAME }}
        path: |
          bin/*
          !bin/*-ladspa.dll
          !bin/*-dssi*
    # create release archive
    - name: Create release archive (Linux)
      if: ${{ startsWith(inputs.target, 'linux') && startsWith(github.ref, 'refs/tags/') }}
      shell: bash
      run: |
        cp utils/README-Linux.txt bin/README.txt
        tar chJf ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.tar.xz \
            --transform="s,^bin/,${{ env.RELEASE_BASENAME }}/," \
            bin/*
        echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.tar.xz >> $GITHUB_ENV
    - name: Create release archive (macOS)
      if: ${{ startsWith(inputs.target, 'macos') && startsWith(github.ref, 'refs/tags/') }}
      shell: bash
      run: |
        mv *-macOS.pkg ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.pkg
        echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.pkg >> $GITHUB_ENV
    - name: Create release archive (Windows)
      if: ${{ startsWith(inputs.target, 'win') && startsWith(github.ref, 'refs/tags/') }}
      shell: bash
      run: |
        cp utils/README-Windows.txt bin/README.txt
        mv bin ${{ env.RELEASE_BASENAME }}
        zip -r -9 build.zip ${{ env.RELEASE_BASENAME }}/* -x ${{ env.RELEASE_BASENAME }}/*-ladspa.dll -x ${{ env.RELEASE_BASENAME }}/*-dssi.dll
        mv build.zip ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.zip
        echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.zip >> $GITHUB_ENV
    # upload release archive
    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          ${{ env.RELEASE_FILENAME }}
